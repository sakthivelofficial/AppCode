/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class AuthenticationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44363";
    }

    userDetailsRegister(usd: RegisterUserDetails): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Authentication/UserDetailsRegister";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(usd);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUserDetailsRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserDetailsRegister(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processUserDetailsRegister(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    validateUserProfile(usd: UserDetails): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Authentication/ValidateUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(usd);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processValidateUserProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processValidateUserProfile(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processValidateUserProfile(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class CourseDetailsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44363";
    }

    getCourseDetails(): Observable<Coursedetailsmodel> {
        let url_ = this.baseUrl + "/api/CourseDetails/GetCourseDetails";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCourseDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCourseDetails(<any>response_);
                } catch (e) {
                    return <Observable<Coursedetailsmodel>><any>_observableThrow(e);
                }
            } else
                return <Observable<Coursedetailsmodel>><any>_observableThrow(response_);
        }));
    }

    protected processGetCourseDetails(response: HttpResponseBase): Observable<Coursedetailsmodel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Coursedetailsmodel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Coursedetailsmodel>(<any>null);
    }

    getFeesbyCourseID(courseId: number | undefined, gradeId: number | undefined, levelId: number | undefined, classCount: number | undefined, isAbroad: boolean | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/CourseDetails/GetFeesbyCourseID?";
        if (courseId === null)
            throw new Error("The parameter 'courseId' cannot be null.");
        else if (courseId !== undefined)
            url_ += "CourseId=" + encodeURIComponent("" + courseId) + "&";
        if (gradeId === null)
            throw new Error("The parameter 'gradeId' cannot be null.");
        else if (gradeId !== undefined)
            url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
        if (levelId === null)
            throw new Error("The parameter 'levelId' cannot be null.");
        else if (levelId !== undefined)
            url_ += "LevelId=" + encodeURIComponent("" + levelId) + "&";
        if (classCount === null)
            throw new Error("The parameter 'classCount' cannot be null.");
        else if (classCount !== undefined)
            url_ += "ClassCount=" + encodeURIComponent("" + classCount) + "&";
        if (isAbroad === null)
            throw new Error("The parameter 'isAbroad' cannot be null.");
        else if (isAbroad !== undefined)
            url_ += "isAbroad=" + encodeURIComponent("" + isAbroad) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeesbyCourseID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeesbyCourseID(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processGetFeesbyCourseID(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class StudentsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44363";
    }

    insertStudentAdmission(student: InsertStudent): Observable<number> {
        let url_ = this.baseUrl + "/api/Students/StudentAdmission";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(student);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertStudentAdmission(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertStudentAdmission(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processInsertStudentAdmission(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class WeatherForecastClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44363";
    }

    get(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[]>(<any>null);
    }
}

export class RegisterUserDetails implements IRegisterUserDetails {
    firstName?: string | undefined;
    lastName?: string | undefined;
    phonenumber?: string | undefined;
    email?: string | undefined;
    selectedCourse?: string | undefined;

    constructor(data?: IRegisterUserDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phonenumber = _data["phonenumber"];
            this.email = _data["email"];
            this.selectedCourse = _data["selectedCourse"];
        }
    }

    static fromJS(data: any): RegisterUserDetails {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phonenumber"] = this.phonenumber;
        data["email"] = this.email;
        data["selectedCourse"] = this.selectedCourse;
        return data; 
    }

    clone(): RegisterUserDetails {
        const json = this.toJSON();
        let result = new RegisterUserDetails();
        result.init(json);
        return result;
    }
}

export interface IRegisterUserDetails {
    firstName?: string | undefined;
    lastName?: string | undefined;
    phonenumber?: string | undefined;
    email?: string | undefined;
    selectedCourse?: string | undefined;
}

export class UserDetails implements IUserDetails {
    userName?: string | undefined;
    password?: string | undefined;

    constructor(data?: IUserDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserDetails {
        data = typeof data === 'object' ? data : {};
        let result = new UserDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }

    clone(): UserDetails {
        const json = this.toJSON();
        let result = new UserDetails();
        result.init(json);
        return result;
    }
}

export interface IUserDetails {
    userName?: string | undefined;
    password?: string | undefined;
}

export class Coursedetailsmodel implements ICoursedetailsmodel {
    courses?: Coursenames[] | undefined;
    grades?: CourseGrades[] | undefined;
    levels?: CourseLevels[] | undefined;

    constructor(data?: ICoursedetailsmodel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["courses"])) {
                this.courses = [] as any;
                for (let item of _data["courses"])
                    this.courses!.push(Coursenames.fromJS(item));
            }
            if (Array.isArray(_data["grades"])) {
                this.grades = [] as any;
                for (let item of _data["grades"])
                    this.grades!.push(CourseGrades.fromJS(item));
            }
            if (Array.isArray(_data["levels"])) {
                this.levels = [] as any;
                for (let item of _data["levels"])
                    this.levels!.push(CourseLevels.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Coursedetailsmodel {
        data = typeof data === 'object' ? data : {};
        let result = new Coursedetailsmodel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.courses)) {
            data["courses"] = [];
            for (let item of this.courses)
                data["courses"].push(item.toJSON());
        }
        if (Array.isArray(this.grades)) {
            data["grades"] = [];
            for (let item of this.grades)
                data["grades"].push(item.toJSON());
        }
        if (Array.isArray(this.levels)) {
            data["levels"] = [];
            for (let item of this.levels)
                data["levels"].push(item.toJSON());
        }
        return data; 
    }

    clone(): Coursedetailsmodel {
        const json = this.toJSON();
        let result = new Coursedetailsmodel();
        result.init(json);
        return result;
    }
}

export interface ICoursedetailsmodel {
    courses?: Coursenames[] | undefined;
    grades?: CourseGrades[] | undefined;
    levels?: CourseLevels[] | undefined;
}

export class Coursenames implements ICoursenames {
    courseId!: number;
    courseName?: string | undefined;
    isDeleted?: string | undefined;

    constructor(data?: ICoursenames) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courseId = _data["courseId"];
            this.courseName = _data["courseName"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): Coursenames {
        data = typeof data === 'object' ? data : {};
        let result = new Coursenames();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courseId"] = this.courseId;
        data["courseName"] = this.courseName;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }

    clone(): Coursenames {
        const json = this.toJSON();
        let result = new Coursenames();
        result.init(json);
        return result;
    }
}

export interface ICoursenames {
    courseId: number;
    courseName?: string | undefined;
    isDeleted?: string | undefined;
}

export class CourseGrades implements ICourseGrades {
    gradeId!: number;
    gradeName?: string | undefined;
    isDeleted?: string | undefined;

    constructor(data?: ICourseGrades) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gradeId = _data["gradeId"];
            this.gradeName = _data["gradeName"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): CourseGrades {
        data = typeof data === 'object' ? data : {};
        let result = new CourseGrades();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gradeId"] = this.gradeId;
        data["gradeName"] = this.gradeName;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }

    clone(): CourseGrades {
        const json = this.toJSON();
        let result = new CourseGrades();
        result.init(json);
        return result;
    }
}

export interface ICourseGrades {
    gradeId: number;
    gradeName?: string | undefined;
    isDeleted?: string | undefined;
}

export class CourseLevels implements ICourseLevels {
    levelId!: number;
    levelName?: string | undefined;

    constructor(data?: ICourseLevels) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.levelId = _data["levelId"];
            this.levelName = _data["levelName"];
        }
    }

    static fromJS(data: any): CourseLevels {
        data = typeof data === 'object' ? data : {};
        let result = new CourseLevels();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["levelId"] = this.levelId;
        data["levelName"] = this.levelName;
        return data; 
    }

    clone(): CourseLevels {
        const json = this.toJSON();
        let result = new CourseLevels();
        result.init(json);
        return result;
    }
}

export interface ICourseLevels {
    levelId: number;
    levelName?: string | undefined;
}

export class InsertStudent implements IInsertStudent {
    student?: Student | undefined;
    courses?: StudentCourse[] | undefined;

    constructor(data?: IInsertStudent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.student = _data["student"] ? Student.fromJS(_data["student"]) : <any>undefined;
            if (Array.isArray(_data["courses"])) {
                this.courses = [] as any;
                for (let item of _data["courses"])
                    this.courses!.push(StudentCourse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InsertStudent {
        data = typeof data === 'object' ? data : {};
        let result = new InsertStudent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["student"] = this.student ? this.student.toJSON() : <any>undefined;
        if (Array.isArray(this.courses)) {
            data["courses"] = [];
            for (let item of this.courses)
                data["courses"].push(item.toJSON());
        }
        return data; 
    }

    clone(): InsertStudent {
        const json = this.toJSON();
        let result = new InsertStudent();
        result.init(json);
        return result;
    }
}

export interface IInsertStudent {
    student?: Student | undefined;
    courses?: StudentCourse[] | undefined;
}

export class Student implements IStudent {
    studentID?: number | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    parentName?: string | undefined;
    contactNumber!: number;
    emailId?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    country?: string | undefined;
    abroadStudent?: boolean | undefined;

    constructor(data?: IStudent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.studentID = _data["studentID"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.parentName = _data["parentName"];
            this.contactNumber = _data["contactNumber"];
            this.emailId = _data["emailId"];
            this.address = _data["address"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.country = _data["country"];
            this.abroadStudent = _data["abroadStudent"];
        }
    }

    static fromJS(data: any): Student {
        data = typeof data === 'object' ? data : {};
        let result = new Student();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["studentID"] = this.studentID;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["parentName"] = this.parentName;
        data["contactNumber"] = this.contactNumber;
        data["emailId"] = this.emailId;
        data["address"] = this.address;
        data["city"] = this.city;
        data["state"] = this.state;
        data["country"] = this.country;
        data["abroadStudent"] = this.abroadStudent;
        return data; 
    }

    clone(): Student {
        const json = this.toJSON();
        let result = new Student();
        result.init(json);
        return result;
    }
}

export interface IStudent {
    studentID?: number | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    parentName?: string | undefined;
    contactNumber: number;
    emailId?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    country?: string | undefined;
    abroadStudent?: boolean | undefined;
}

export class StudentCourse implements IStudentCourse {
    mappingId?: number | undefined;
    studentID?: number | undefined;
    courseId?: number | undefined;
    levelId?: number | undefined;
    gradeId?: number | undefined;
    classCount?: number | undefined;
    additionalCharge?: number | undefined;
    isCompleted?: boolean | undefined;

    constructor(data?: IStudentCourse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mappingId = _data["mappingId"];
            this.studentID = _data["studentID"];
            this.courseId = _data["courseId"];
            this.levelId = _data["levelId"];
            this.gradeId = _data["gradeId"];
            this.classCount = _data["classCount"];
            this.additionalCharge = _data["additionalCharge"];
            this.isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): StudentCourse {
        data = typeof data === 'object' ? data : {};
        let result = new StudentCourse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mappingId"] = this.mappingId;
        data["studentID"] = this.studentID;
        data["courseId"] = this.courseId;
        data["levelId"] = this.levelId;
        data["gradeId"] = this.gradeId;
        data["classCount"] = this.classCount;
        data["additionalCharge"] = this.additionalCharge;
        data["isCompleted"] = this.isCompleted;
        return data; 
    }

    clone(): StudentCourse {
        const json = this.toJSON();
        let result = new StudentCourse();
        result.init(json);
        return result;
    }
}

export interface IStudentCourse {
    mappingId?: number | undefined;
    studentID?: number | undefined;
    courseId?: number | undefined;
    levelId?: number | undefined;
    gradeId?: number | undefined;
    classCount?: number | undefined;
    additionalCharge?: number | undefined;
    isCompleted?: boolean | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date!: Date;
    temperatureC!: number;
    temperatureF!: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }

    clone(): WeatherForecast {
        const json = this.toJSON();
        let result = new WeatherForecast();
        result.init(json);
        return result;
    }
}

export interface IWeatherForecast {
    date: Date;
    temperatureC: number;
    temperatureF: number;
    summary?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}